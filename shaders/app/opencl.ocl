int GreaterVec(float3 a,float3 b){
	return int(dot(int3(sign(a-b)),int3(4,2,1)));
}

int ComputeMult(float3 A,float3 B,float3 C,float4 L){
  float3 n=cross(C-A,L.xyz-A*L.w);
	return int(sign(dot(n,B-A)));
}


__kernel void HullsQuads(
const unsigned NumEdge,
const unsigned NumTriangle,
const float4   LightPosition,
const float4x4 mvp
__global float4*IBuffer,
__global float4*OBuffer,
__global unsigned*Counter){
	unsigned gid=get_global_id(0);
	if(gid>NumEdge)return;//compute silhouette
	float4 P[4];
	gid*=16;

	P[0]=IBuffer[gid+0];
	P[1]=IBuffer[gid+1];
	P[2]=float4(P[0].xyz*LightPosition.w-LightPosition.xyz,0);
	P[3]=float4(P[1].xyz*LightPosition.w-LightPosition.xyz,0);

	int Multiplicity=0;
	int Num=int(IBuffer[gid+15].x)+2;

	for(int i=2;i<Num;++i){
#define T0 P[0].xyz
#define T1 P[1].xyz
#define T2 IBuffer[gid+i].xyz
		if(GreaterVec(T0,T2)>0){//T[2] T[0] T[1]?
			Multiplicity+=ComputeMult(T2,T0,T1,LightPosition);
		}else{
			if(GreaterVec(T1,T2)>0){//T[0] T[2] T[1]?
				Multiplicity-=ComputeMult(T0,T2,T1,LightPosition);
			}else{//T[0] T[1] T[2]?
				Multiplicity+=ComputeMult(T0,T1,T2,LightPosition);
			}
		}
	}
	if(Multiplicity>0){
		uint WH=atomic_add(Counter[(Multiplicity-1)*4],4)+NumEdge*6*(Multiplicity-1);
		OBuffer[WH++]=P[0];
		OBuffer[WH++]=P[1];
		OBuffer[WH++]=P[2];
		OBuffer[WH++]=P[3];
	}
	if(Multiplicity<0){
		Multiplicity=-Multiplicity;
		uint WH=atomic_add(Counter[(Multiplicity-1)*4],4)+NumEdge*6*(Multiplicity-1);
		OBuffer[WH++]=P[1];
		OBuffer[WH++]=P[0];
		OBuffer[WH++]=P[3];
		OBuffer[WH++]=P[2];
	}
}
