#version 100

attribute vec4 Position0;
attribute vec4 Position1;
attribute vec4 Position2;
attribute vec4 Position3;
attribute vec4 Position4;
attribute vec4 Position5;

uniform vec4 LightPosition;
uniform mat4 mvp;

int GreaterVec(vec3 a,vec3 b){
	return int(dot(vec3(greaterThanEqual(a,b))*2.0-1.0,vec3(4,2,1)));
}

int ComputeMult(vec3 A,vec3 B,vec3 C,vec4 L){
  vec3 n=cross(C-A,L.xyz-A*L.w);
	return int(sign(dot(n,B-A)));
}

void main(){
	int Num=int(Position0.w)%8;
	int SideID=int(Position1.w)/(4*4);
	int VertexIDCCW=int(Position1.w)%4;
	int VertexIDCW=(int(Position1.w)/4)%4;
	
	vec4 O[4];
	O[0]=Position2;
	O[1]=Position3;
	O[2]=Position4;
	O[3]=Position5;

	vec4 P[4];
	P[0]=vec4(Position0.xyz,1);
	P[1]=vec4(Position1.xyz,1);
	P[2]=vec4(P[0].xyz*LightPosition.w-LightPosition.xyz,0);
	P[3]=vec4(P[1].xyz*LightPosition.w-LightPosition.xyz,0);

	int Multiplicity=0;
	for(int i=0;i<Num;++i){
#define T0 P[0].xyz
#define T1 P[1].xyz
#define T2 O[i].xyz
		if(GreaterVec(T0,T2)>0){//T[2] T[0] T[1]?
			Multiplicity+=ComputeMult(T2,T0,T1,LightPosition);
		}else{
			if(GreaterVec(T1,T2)>0){//T[0] T[2] T[1]?
				Multiplicity-=ComputeMult(T0,T2,T1,LightPosition);
			}else{//T[0] T[1] T[2]?
				Multiplicity+=ComputeMult(T0,T1,T2,LightPosition);
			}
		}
	}
	/*
		 if(Multiplicity<0){
		 vec4 c=P[0];
		 P[0]=P[3];
		 P[3]=c;
		 c=P[1];
		 P[1]=P[2];
		 P[2]=c;
		 }*/
	if(SideID<int(abs(float(Multiplicity)))){
		if(Multiplicity>0)
			gl_Position=mvp*P[VertexIDCCW];
		if(Multiplicity<0)
			gl_Position=mvp*P[VertexIDCW];
	}else
		gl_Position=vec4(0,0,0,0);
	/*if(SideID<int(abs(float(Multiplicity))))
		gl_Position=vec4(float(VertexIDCCW%2)/7.0+float(Multiplicity)/5.0,float(VertexIDCCW/2)/7.0+float(SideID)/5.0,0,1);
	else
		gl_Position=vec4(0,0,0,0);*/

}

