#version 430 core

/*
1D WorkGroup
2D Dispatch
*/

#define WAVEFRONT_SIZE 64
#define DO_NOT_COUNT_WITH_INFINITY

//DO NOT EDIT ANYTHING BELOW THIS LINE

#define FLOAT_MAX 1000.0f
#define HALF_WAVEFRONT (WAVEFRONT_SIZE/2)
#define NUM_ITERATION (int(ceil(log(WAVEFRONT_SIZE)/log(2))))

layout(local_size_x=WAVEFRONT_SIZE)in;

layout(std430,binding=0)buffer HDB{vec2 HDBData[];};

/*
LevelSizeInTiles



*/

uniform uvec2 DstTileSizeInPixels;
uniform uvec2 DstTileSizeInTiles;
uniform uvec2 WindowSize;
uniform uint  SrcOffset;
uniform uint  DstOffset;

shared vec2 SharedMinMax[WAVEFRONT_SIZE];
shared float Shared[WAVEFRONT_SIZE*2];

void main(){
	//skip useless tiles
	if(any(greaterThanEqual(gl_WorkGroupID.xy*DstTileSizeInPixels,WindowSize)))return;
	//writing index
	uint WriteIndex=gl_WorkGroupID.y*gl_NumWorkGroups.x+gl_WorkGroupID.x;
	//cooperative read into shared memory
	//SharedMinMax[gl_LocalInvocationID.x]=vec2(SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x);//HDBData[SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x];
	//wait for all invocation to complete reading
	Shared[(gl_LocalInvocationID.x<<1)+0]=
		HDBData[SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x].x;
	Shared[(gl_LocalInvocationID.x<<1)+1]=
		HDBData[SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x].y;
	//Shared[(gl_LocalInvocationID.x<<1)+0]=SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x;
	//Shared[(gl_LocalInvocationID.x<<1)+1]=SrcOffset+WriteIndex*WAVEFRONT_SIZE+gl_LocalInvocationID.x;

	memoryBarrierShared();
	//find min and max
	//min: if(a>b)a:=b if(a-b>0)a:=b if((1-2*(DoMax))*(a-b))a:=b
	//max: if(a<b)a:=b if(b-a>0)a:=b if((1-2*(DoMax))*(a-b))a:=b
	//0Invocation: 0 1 2 3 4 5 6 7
	//DoMax:       0 1 0 1 0 1 0 1
	//0Base:       0 0 2 2 4 4 6 6
	//0BaseIndexa: 0 0 2 2 4 4 6 6
	//0BaseIndexb: 1 1 3 3 5 5 7 7
	//
	//1Invocation: 0 1 2 3
	//DoMax:       0 1 0 1
	//1Base:       0 0 2 2
	//1BaseIndexa: 0 0 4 4
	//1BaseIndexb: 2 2 6 6
	//
	//2Invocation: 0 1
	//DoMax:       0 1
	//2Base:       0 0
	//2BaseIndexa: 0 0
	//2BaseIndexb: 4 4
//*
	uint DoMax=gl_LocalInvocationID.x&1;
	for(int l=0;l<NUM_ITERATION;++l){
		if(gl_LocalInvocationID.x<(WAVEFRONT_SIZE>>l)){
			uint BaseIndex=(gl_LocalInvocationID.x&(~1))<<(l);
			float a=Shared[(BaseIndex<<1)+DoMax];
			float b=Shared[((BaseIndex+(1<<l))<<1)+DoMax];
#ifdef DO_NOT_COUNT_WITH_INFINITY
			//if(a>=1)a=b;
			//if(b>=1)b=a;
			//if(a<=-1)a=b;
			//if(b<=-1)b=a;
#endif
			if((1-2*int(DoMax))*(a-b)>0)Shared[(BaseIndex<<1)+DoMax]=b;
		}
		memoryBarrierShared();
	}
	uvec2 WriteIndex2D=uvec2(WriteIndex%DstTileSizeInTiles.x,WriteIndex/DstTileSizeInTiles);
	//write result
	if(gl_LocalInvocationID.x<2)
//		HDBData[DstOffset+WriteIndex][gl_LocalInvocationID.x]=Shared[gl_LocalInvocationID.x];
		HDBData[DstOffset+WriteIndex][gl_LocalInvocationID.x]=Shared[gl_LocalInvocationID.x];
}


