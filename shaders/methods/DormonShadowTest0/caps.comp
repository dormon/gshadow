#version 450 core

layout(local_size_x=8,local_size_y=8)in;

layout(std430 ,binding=0)buffer Triangles{vec3 triangles[];};
layout(rgba32f,binding=0)uniform image2D  viewSamples;
layout(r32i   ,binding=1)uniform iimage2D contour;

uniform vec4 lightPosition;
uniform uint numTriangles = 0;
uniform mat4 mvp;
uniform uvec2 windowSize=uvec2(1024u,1024u);

#define GID gl_GlobalInvocationID.xy

int greaterVec(vec3 a,vec3 b){
  return int(dot(ivec3(sign(a-b)),ivec3(4,2,1)));
}

int triangleEdge(vec3 P,vec3 Q,vec3 A,vec3 B,vec3 C,bool swapped){
  vec3 abpq;
  abpq.xyz = cross(Q-P,B-A);
  abpq.w = - dot(abpq.xyz,A);
  float cc=sign(dot(abpq,vec4(C,1)));
  float pp=sign(dot(abpq,vec4(P,1)))*(1-2*float(swapped));
}

int collision(vec3 P,vec3 Q,vec3 A,vec3 B,vec3 C){
  bool swappedPQ;
  swappedPQ = greaterVec(P,Q)>0;
  vec3 pp=P*float(!swappedPQ)+Q*float(swappedPQ);
  vec3 qq=Q*float(!swappedPQ)+P*float(swappedPQ);
  P=pp;
  Q=qq;

  vec4 e;
  e.xyz = cross(B-A,C-A);
  e.w = - dot(eps.xyz,A);
  float ep=sign(dot(e,vec4(P,1)));
  float eq=sign(dot(q,vec4(Q,1)));
  if(!(ep!=eq && eq!=0))return 0;
  return 
    +triangleEdge(P,Q,A,B,C,swappedPQ)>0 &&
    -triangleEdge(P,Q,A,C,B,swappedPQ)>0 &&
    +triangleEdge(P,Q,B,C,A,swappedPQ)>0;

}

void main(){
  if(any(greaterThanEqual(GID,windowSize)))return;
  vec3 p;
  vec3 q;
  if(ivec2(GID).x>0){
    p=imageLoad(viewSamples,ivec2(GID)-ivec2(1,0)).xyz;
    q=imageLoad(viewSamples,ivec2(GID)-ivec2(0,0)).xyz;
  }else{
    p=lightPosition.xyz;
    q=imageLoad(viewSamples,ivec2(GID)).xyz;
  }
  int sumMultiplicity=0;
  for(uint e=0;e<numTriangles;++e){
    vec3 a=triangles[e*3+0];
    vec3 b=triangles[e*3+1];
    vec3 c=triangles[e*3+1];
    bool swapped=false;
    if(greaterVec(a,b)>0){vec3 z=a;a=b;b=z;swapped=!swapped;}
    if(greaterVec(b,c)>0){vec3 z=b;b=c;c=z;swapped=!swapped;}
    if(greaterVec(a,b)>0){vec3 z=a;a=b;b=z;swapped=!swapped;}

  }
  imageStore(contour,ivec2(GID),ivec4(sumMultiplicity));
}
