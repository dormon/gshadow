#version 450 core

#ifndef MAX_MULTIPLICITY
#define MAX_MULTIPLICITY 4
#endif//MAX_MULTIPLICITY

layout(local_size_x=8,local_size_y=8)in;

layout(std430 ,binding=0)buffer Edges{vec4 edges[];};
layout(rgba32f,binding=0)uniform image2D  viewSamples;
layout(r32i   ,binding=1)uniform iimage2D contour;

uniform vec4 lightPosition;
uniform uint numEdges = 0;
uniform mat4 mvp;
uniform uvec2 windowSize=uvec2(1024u,1024u);

#define GID gl_GlobalInvocationID.xy

int greaterVec(vec3 a,vec3 b){
  return int(dot(ivec3(sign(a-b)),ivec3(4,2,1)));
}

int computeMult(vec3 A,vec3 B,vec3 C,vec4 L){
  vec3 n=cross(C-A,L.xyz-A*L.w);
  return int(sign(dot(n,B-A)));
}

//2D example
//
//P.xy,Q.xy view-samples
//R.xy ray from one point of edge
//Oi.xy other rays from other points of edges
//Mi multiplicity of edge R-Oi
//
//v = Q-P
//n = (-v.y,v.x)
//rv = n*R-n*Q
//oiv = n*Oi-n*Q
//sum( sign(rv)!=sign(oiv)*Mi )

//L=(L.xyz,L.w)
//A=(A.xyz,1)
//B=(B.xyz,1)
//C=(A.xyz*L.w-L.xyz,0)
//D=(B.xyz*L.w-L.xyz,0)
//
//P=(P.xyz,1)
//Q=(Q.xyz,1)
//
//X(s) = P + s*(Q-P)
//
//M(t) = A + t*(B-A)
//N(t) = C + t*(D-C)
//X(t,l) = M(t) + l*(N(t)-M(t))
//X(t,l) = A + t*(B-A) + l*(C+t*(D-C)-A-t*(B-A))
//X(t,l) = A + t*(B-A) + l*(C-A) + t*l*((D-C)-(B-A))
//X(t,l) = A + t*(B-A) + l*(C-A)
//X(t,l) = A + t*(B-A) + l*(-L.xyz,-1)
//
//X(s).xyz/X(s).w = X(t,l).xyz/X(t,l).w
//X(s).xyz/1 = X(t,l).xyz/(1-l)
//P + s*(Q-P) =( A + t*(B-A) + l*(-L.xyz,-1) ) / (1-l)
//P*(1-l) + s*(1-l)*(Q-P) = A + t*(B-A) + l*(-L)
//(P-A)
//(P-A) = t*(B-A) + l*(-L.xyz,-1) + s*(P-Q)
//a = t*b + l*c + s*d
//

uniform bool noif = false;

int collision2(vec3 P,vec3 Q,vec3 A,vec3 B,vec3 L){
  bool swappedPQ;
  swappedPQ = greaterVec(P,Q)>0;
  vec3 pp=P*float(!swappedPQ)+Q*float(swappedPQ);
  vec3 qq=Q*float(!swappedPQ)+P*float(swappedPQ);
  P=pp;
  Q=qq;
  vec4 pq,ab;
  pq.xyz = cross(Q-P,L-P);
  pq.w = - dot(pq.xyz,P);
  ab.xyz = cross(B-A,L-A);
  ab.w = - dot(ab.xyz,A);
  float pqa=sign(dot(pq,vec4(A.xyz,1)));
  float pqb=sign(dot(pq,vec4(B.xyz,1)));
  float abp=sign(dot(ab,vec4(P.xyz,1)));
  float abq=sign(dot(ab,vec4(Q.xyz,1)));

  vec4 abpq;
  abpq.xyz = cross(Q-P,B-A);
  abpq.w = - dot(abpq.xyz,A);

  float abpqp=dot(abpq,vec4(P,1))*(1-2*float(swappedPQ));
  //abpqp = 32;
  

  

  int col = int(pqa != pqb && abp != abq && pqb != 0 && abq != 0);// && abpqp>=0);
  int val = int(sign(abp-abq)*(1-2*float(swappedPQ)));
  return col*val;
}

/*
int collision3(bool swappedPQ,vec3 P,vec3 Q,vec4 pq,vec3 A,vec3 B,vec3 L){
  vec4 ab;
  ab.xyz = cross(B-A,L-A);
  ab.w = - dot(ab.xyz,A);
  float pqa=sign(dot(pq,vec4(A.xyz,1)));
  float pqb=sign(dot(pq,vec4(B.xyz,1)));
  float abp=sign(dot(ab,vec4(P.xyz,1)));
  float abq=sign(dot(ab,vec4(Q.xyz,1)));

  int col = int(pqa != pqb && abp != abq && pqb != 0 && abq != 0);
  int val = int(sign(abp-abq)*(1-2*float(swappedPQ)));
  return col*val;
}
*/

void main(){
  if(any(greaterThanEqual(GID,windowSize)))return;
  vec3 p;
  vec3 q;
  if(ivec2(GID).x>0){
    p=imageLoad(viewSamples,ivec2(GID)-ivec2(1,0)).xyz;
    q=imageLoad(viewSamples,ivec2(GID)-ivec2(0,0)).xyz;
  }else{
    p=lightPosition.xyz;
    q=imageLoad(viewSamples,ivec2(GID)).xyz;
  }
 
/*
  bool swappedPQ;
  swappedPQ = greaterVec(p,q)>0;
  vec3 pp=p*float(!swappedPQ)+q*float(swappedPQ);
  vec3 qq=q*float(!swappedPQ)+p*float(swappedPQ);
  p=pp;
  q=qq;
  vec4 pq;
  pq.xyz = cross(q-p,lightPosition.xyz-p);
  pq.w = - dot(pq.xyz,p);
*/

  int sumMultiplicity=0;
  for(uint e=0;e<numEdges;++e){
    vec4 P[4];
    uint gid=e*(2+MAX_MULTIPLICITY);

    P[0]=edges[gid+0];
    P[1]=edges[gid+1];
    P[2]=vec4(P[0].xyz*lightPosition.w-lightPosition.xyz,0);
    P[3]=vec4(P[1].xyz*lightPosition.w-lightPosition.xyz,0);

    int col = collision2(p.xyz,q.xyz,P[0].xyz,P[1].xyz,lightPosition.xyz);
    //int col = collision3(swappedPQ,p,q,pq,P[0].xyz,P[1].xyz,lightPosition.xyz);
    if(0==col)continue;

    int Num=int(P[0].w)+2;
    P[0].w=1;
    precise int multiplicity=0;
    if(Num>20)Num=0;
    if(Num<0)Num=0;

    for(int i=2;i<Num;++i){
#define T0 P[0].xyz
#define T1 P[1].xyz
#define T2 edges[gid+i].xyz
      if(greaterVec(T0,T2)>0){//T[2] T[0] T[1]?
        multiplicity+=computeMult(T2,T0,T1,lightPosition);
      }else{
        if(greaterVec(T1,T2)>0){//T[0] T[2] T[1]?
          multiplicity-=computeMult(T0,T2,T1,lightPosition);
        }else{//T[0] T[1] T[2]?
          multiplicity+=computeMult(T0,T1,T2,lightPosition);
        }
      }
    }
    sumMultiplicity+=multiplicity*col;
  }
  //TODO atomicStore
  imageStore(contour,ivec2(GID),ivec4(sumMultiplicity));
}
