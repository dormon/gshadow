#version 100

// DO NOT CHANGE ANYTHING BELOW THIS COMMENT!!!
// UNLESS, OF COURSE, YOU KNOW WHAT YOU ARE DOING.

// parameters of shader that can be declared
// MAX_MULTIPLICITY
// VERTEX_ATTRIB_NAME
// LIGHT_UNIFORM_NAME
// MATRIX_UNIFORM_NAME
// USE_INSTANCING
// USE_MULTIDRAW
// SIDEID_UNIFORM_NAME

#if defined(USE_INSTANCING) && defined(USE_MULTIDRAW)
#error you cannot use instancing and drawing shadow geometery multiple times (USE_MULTIDRAW)
#endif

#ifndef MAX_MULTIPLICITY
#define MAX_MULTIPLICITY 3
#endif//MAX_MULTIPLICITY

#if (MAX_MULTIPLICITY > 14 && !defined(USE_INSTANCING))
  #error Max Multiplicity cannot exceed 14
#endif

#if defined(USE_INSTANCING) && defined(GL_ES)
  #define USE_INSTANCING_ES
#endif

#if (MAX_MULTIPLICITY > 13 && defined(USE_INSTANCING_ES)) || MAX_MULTIPLICITY < 1
  #error Max Multiplicity cannot exceed 13 and cannot be 0 or less
#endif

#ifndef VERTEX_ATTRIB_NAME
#define VERTEX_ATTRIB_NAME position
#endif//VERTEX_ATTRIB_NAME

#ifndef LIGHT_UNIFORM_NAME
#define LIGHT_UNIFORM_NAME lightPosition
#endif//LIGHT_UNIFORM_NAME

#ifndef MATRIX_UNIFORM_NAME
#define MATRIX_UNIFORM_NAME mvp
#endif//MATRIX_UNIFORM_NAME

#ifndef SIDEID_UNIFORM_NAME
#define SIDEID_UNIFORM_NAME side
#endif//SIDEID_UNIFORM_NAME

/////////////////////////////////////////////////////////////////////
// differences between versions
/////////////////////////////////////////////////////////////////////

#define PASTER_(x,y) x##y
#define PASTER(x,y) PASTER_(x,y)

#if __VERSION__ < 130
  #define IMOD(X,Y) int(mod(float(X),float(Y)))
#else
  #define IMOD(X,Y) (X%Y)
#endif

#if __VERSION__ < 130
  #define INPUT_KEYWORD attribute
#else
  #define INPUT_KEYWORD in
#endif

#define DEF_INPUT(type,name,number) INPUT_KEYWORD type PASTER(name,number);

DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,0)
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,1)

#if (MAX_MULTIPLICITY+1>0  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>0  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,2)
#endif
#if (MAX_MULTIPLICITY+1>1  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>1  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,3)
#endif
#if (MAX_MULTIPLICITY+1>2  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>2  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,4)
#endif
#if (MAX_MULTIPLICITY+1>3  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>3  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,5)
#endif
#if (MAX_MULTIPLICITY+1>4  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>4  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,6)
#endif
#if (MAX_MULTIPLICITY+1>5  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>5  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,7)
#endif
#if (MAX_MULTIPLICITY+1>6  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>6  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,8)
#endif
#if (MAX_MULTIPLICITY+1>7  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>7  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,9)
#endif
#if (MAX_MULTIPLICITY+1>8  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>8  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,10)
#endif
#if (MAX_MULTIPLICITY+1>9  && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>9  && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,11)
#endif
#if (MAX_MULTIPLICITY+1>10 && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>10 && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,12)
#endif
#if (MAX_MULTIPLICITY+1>11 && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>11 && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,13)
#endif
#if (MAX_MULTIPLICITY+1>12 && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>12 && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,14)
#endif
#if (MAX_MULTIPLICITY+1>13 && defined(USE_INSTANCING_ES)) || (MAX_MULTIPLICITY>13 && !defined(USE_INSTANCING_ES))
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,15)
#endif


uniform vec4 LIGHT_UNIFORM_NAME;
uniform mat4 MATRIX_UNIFORM_NAME;

#ifdef USE_MULTIDRAW
uniform int SIDEID_UNIFORM_NAME;
#endif

int greaterVec(vec3 a,vec3 b){
  return int(dot(sign(a-b),vec3(4.0,2.0,1.0)));
}
int computeMult(vec3 A,vec3 B,vec3 C,vec4 L){
  vec3 n=cross(C-A,L.xyz-A*L.w);
  return int(sign(dot(n,B-A)));
}

#define CURRENT_MULTIPLICITY(mult,T0,T1,nofOpposite,opposite)\
  if(opposite-2<nofOpposite){\
    if(greaterVec(T0,PASTER(VERTEX_ATTRIB_NAME,opposite).xyz)>0){/*T[2] T[0] T[1]? */\
      mult+=computeMult(PASTER(VERTEX_ATTRIB_NAME,opposite).xyz,T0,T1,LIGHT_UNIFORM_NAME);\
    }else{\
      if(greaterVec(T1,PASTER(VERTEX_ATTRIB_NAME,opposite).xyz)>0){/*T[0] T[2] T[1]?*/\
        mult-=computeMult(T0,PASTER(VERTEX_ATTRIB_NAME,opposite).xyz,T1,LIGHT_UNIFORM_NAME);\
      }else{/*T[0] T[1] T[2]?*/\
        mult+=computeMult(T0,T1,PASTER(VERTEX_ATTRIB_NAME,opposite).xyz,LIGHT_UNIFORM_NAME);\
      }\
    }\
  }

#define POINT_A PASTER(VERTEX_ATTRIB_NAME,0)
#define POINT_B PASTER(VERTEX_ATTRIB_NAME,1)


#if defined(USE_INSTANCING) && defined(GL_ES)
#define INSTANCE_ID PASTER(VERTEX_ATTRIB_NAME,2)
#endif


void main(){
  int nofOpposite = int(POINT_A.w);
  int vertexIDCCW = IMOD(int(POINT_B.w)  ,4);
  int vertexIDCW  = IMOD(int(POINT_B.w)/4,4);

#ifdef  USE_MULTIDRAW
  int sideID = SIDEID_UNIFORM_NAME;
#else //USE_MULTIDRAW
  #ifdef  USE_INSTANCING
    #ifdef  GL_ES
      int sideID = int(INSTANCE_ID.x);
    #else //GL_ES
      int sideID = gl_InstanceID;
    #endif//GL_ES
  #else//USE_INSTANCING
    int sideID = int(POINT_B.w)/(4*4);
  #endif//USE_INSTANCING
#endif//USE_MULTIDRAW

  vec4 P[4];
  P[0]=vec4(POINT_A.xyz,1);
  P[1]=vec4(POINT_B.xyz,1);
  P[2]=vec4(P[0].xyz*LIGHT_UNIFORM_NAME.w-LIGHT_UNIFORM_NAME.xyz,0);
  P[3]=vec4(P[1].xyz*LIGHT_UNIFORM_NAME.w-LIGHT_UNIFORM_NAME.xyz,0);

  int multiplicity=0;
  #if defined(USE_INSTANCING) && defined(GL_ES)
    #if MAX_MULTIPLICITY > 0
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,3)
    #endif
    #if MAX_MULTIPLICITY > 1
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,4)
    #endif
    #if MAX_MULTIPLICITY > 2
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,5)
    #endif
    #if MAX_MULTIPLICITY > 3
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,6)
    #endif
    #if MAX_MULTIPLICITY > 4
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,7)
    #endif
    #if MAX_MULTIPLICITY > 5
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,8)
    #endif
    #if MAX_MULTIPLICITY > 6
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,9)
    #endif
    #if MAX_MULTIPLICITY > 7
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,10)
    #endif
    #if MAX_MULTIPLICITY > 8
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,11)
    #endif
    #if MAX_MULTIPLICITY > 9
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,12)
    #endif
    #if MAX_MULTIPLICITY > 10
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,13)
    #endif
    #if MAX_MULTIPLICITY > 11
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,14)
    #endif
    #if MAX_MULTIPLICITY > 12
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,15)
    #endif
  #else//USE_INSTANCING
    #if MAX_MULTIPLICITY > 0
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,2)
    #endif
    #if MAX_MULTIPLICITY > 1
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,3)
    #endif
    #if MAX_MULTIPLICITY > 2
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,4)
    #endif
    #if MAX_MULTIPLICITY > 3
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,5)
    #endif
    #if MAX_MULTIPLICITY > 4
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,6)
    #endif
    #if MAX_MULTIPLICITY > 5
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,7)
    #endif
    #if MAX_MULTIPLICITY > 6
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,8)
    #endif
    #if MAX_MULTIPLICITY > 7
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,9)
    #endif
    #if MAX_MULTIPLICITY > 8
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,10)
    #endif
    #if MAX_MULTIPLICITY > 9
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,11)
    #endif
    #if MAX_MULTIPLICITY > 10
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,12)
    #endif
    #if MAX_MULTIPLICITY > 11
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,13)
    #endif
    #if MAX_MULTIPLICITY > 12
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,14)
    #endif
    #if MAX_MULTIPLICITY > 13
    CURRENT_MULTIPLICITY(multiplicity,P[0].xyz,P[1].xyz,nofOpposite,15)
    #endif
  #endif//USE_INSTANCING
  if(sideID<int(abs(float(multiplicity)))){
    if(multiplicity>0)
      #ifdef GL_ES
      for(int i=0;i<4;++i)
        if(i==vertexIDCCW)gl_Position=MATRIX_UNIFORM_NAME*P[i];
      #else
      gl_Position=MATRIX_UNIFORM_NAME*P[vertexIDCCW];
      #endif
    if(multiplicity<0)
      #ifdef GL_ES
      for(int i=0;i<4;++i)
        if(i==vertexIDCW)gl_Position=MATRIX_UNIFORM_NAME*P[i];
      #else
      gl_Position=MATRIX_UNIFORM_NAME*P[vertexIDCW];
      #endif
  }else
    gl_Position=vec4(0,0,0,0);
}

