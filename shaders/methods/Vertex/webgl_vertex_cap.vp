#version 100

// DO NOT CHANGE ANYTHING BELOW THIS COMMENT!!!
// UNLESS, OF COURSE, YOU KNOW WHAT YOU ARE DOING.

// parameters of shader that should be declared
// VERTEX_ATTRIB_NAME
// LIGHT_UNIFORM_NAME
// MATRIX_UNIFORM_NAME

#ifndef VERTEX_ATTRIB_NAME
#define VERTEX_ATTRIB_NAME position
#endif//VERTEX_ATTRIB_NAME

#ifndef LIGHT_UNIFORM_NAME
#define LIGHT_UNIFORM_NAME lightPosition
#endif//LIGHT_UNIFORM_NAME

#ifndef MATRIX_UNIFORM_NAME
#define MATRIX_UNIFORM_NAME mvp
#endif//MATRIX_UNIFORM_NAME

/////////////////////////////////////////////////////////////////////
// differences between versions
/////////////////////////////////////////////////////////////////////

#define PASTER_(x,y) x##y
#define PASTER(x,y) PASTER_(x,y)

#if __VERSION__ < 130
  #define IMOD(X,Y) int(mod(float(X),float(Y)))
#else
  #define IMOD(X,Y) (X%Y)
#endif

#if __VERSION__ < 130
  #define INPUT_KEYWORD attribute
#else
  #define INPUT_KEYWORD in
#endif

#define DEF_INPUT(type,name,number) INPUT_KEYWORD type PASTER(name,number);

DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,0)
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,1)
DEF_INPUT(vec4,VERTEX_ATTRIB_NAME,2)

uniform vec4 LIGHT_UNIFORM_NAME;
uniform mat4 MATRIX_UNIFORM_NAME;

int greaterVec(vec3 a,vec3 b){
  return int(dot(sign(a-b),vec3(4.0,2.0,1.0)));
}
int computeMult(vec3 A,vec3 B,vec3 C,vec4 L){
  vec3 n=cross(C-A,L.xyz-A*L.w);
  return int(sign(dot(n,B-A)));
}

void swap(inout vec4 A,inout vec4 B){vec4 C=A;A=B;B=C;}

#define POINT_A PASTER(VERTEX_ATTRIB_NAME,0)
#define POINT_B PASTER(VERTEX_ATTRIB_NAME,1)
#define POINT_C PASTER(VERTEX_ATTRIB_NAME,2)

void main(){
  vec4 A=POINT_A;
  vec4 B=POINT_B;
  vec4 C=POINT_C;
  if(greaterVec(A.xyz,B.xyz)>0)swap(A,B);
  if(greaterVec(B.xyz,C.xyz)>0)swap(B,C);
  if(greaterVec(A.xyz,B.xyz)>0)swap(A,B);
  int multiplicity=computeMult(A.xyz,B.xyz,C.xyz,LIGHT_UNIFORM_NAME);
  if(multiplicity==0){gl_Position=vec4(0,0,0,1);return;}
  if(multiplicity<0)swap(A,B);
  int vertexID=int(POINT_A.w);
  int vid=IMOD(vertexID,3);
  float farCap=float(vertexID>2);
  vec4 P=A*float(vid==0)+B*float(vid==1)+C*float(vid==2);
  P.w=1.0;
  P=P*(1.0-farCap)+vec4(P.xyz*LIGHT_UNIFORM_NAME.w-LIGHT_UNIFORM_NAME.xyz,0)*farCap;
  P=MATRIX_UNIFORM_NAME*P;
  P=P.xyww*(1.0-farCap)+P*farCap;//front cap
  gl_Position=P;
}

