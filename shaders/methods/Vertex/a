  attribute vec4 aVertexAttrib0;
  attribute vec4 aVertexAttrib1;
  attribute vec4 aVertexAttrib2;
  attribute vec4 aVertexAttrib3;
    attribute float vertexID;
uniform int side;
uniform vec4 lightPosition;
uniform mat4 m;
uniform mat4 v;
uniform mat4 p;
int greaterVec(vec3 a,vec3 b){
  return int(dot(sign(a-b),vec3(4.0,2.0,1.0)));
}
int computeMult(vec3 A,vec3 B,vec3 C,vec4 L){
  vec3 n=cross(C-A,L.xyz-A*L.w);
  return int(sign(dot(n,B-A)));
}
void main(){
  mat4 mvp=p*v*m;
  int vertexIDCCW = int(int(vertexID)>2?int(vertexID)-2:2-int(vertexID));
  int vertexIDCW = int(int(vertexID)>2?6-int(vertexID):int(vertexID));
  int sideID = int(side);
  vec4 P[4];
  P[0]=vec4(aVertexAttrib0.xyz,1);
  P[1]=vec4(aVertexAttrib1.xyz,1);
  P[2]=vec4(P[0].xyz*lightPosition.w-lightPosition.xyz,0);
  P[3]=vec4(P[1].xyz*lightPosition.w-lightPosition.xyz,0);
  int multiplicity=0;
    if(2 -2<int(aVertexAttrib0.w)) if(greaterVec(P[0].xyz,aVertexAttrib2.xyz)>0) multiplicity+=computeMult(aVertexAttrib2.xyz,P[0].xyz,P[1].xyz,lightPosition); else if(greaterVec(P[1].xyz,aVertexAttrib2.xyz)>0) multiplicity-=computeMult(P[0].xyz,aVertexAttrib2.xyz,P[1].xyz,lightPosition); else multiplicity+=computeMult(P[0].xyz,P[1].xyz,aVertexAttrib2.xyz,lightPosition);
    if(3 -2<int(aVertexAttrib0.w)) if(greaterVec(P[0].xyz,aVertexAttrib3.xyz)>0) multiplicity+=computeMult(aVertexAttrib3.xyz,P[0].xyz,P[1].xyz,lightPosition); else if(greaterVec(P[1].xyz,aVertexAttrib3.xyz)>0) multiplicity-=computeMult(P[0].xyz,aVertexAttrib3.xyz,P[1].xyz,lightPosition); else multiplicity+=computeMult(P[0].xyz,P[1].xyz,aVertexAttrib3.xyz,lightPosition);
  if(sideID<int(abs(float(multiplicity)))){
    if(multiplicity>0)
      for(int i=0;i<4;++i)
        if(i==vertexIDCCW)gl_Position=mvp*P[i];
    if(multiplicity<0)
      for(int i=0;i<4;++i)
        if(i==vertexIDCW)gl_Position=mvp*P[i];
  }else
    gl_Position=vec4(0,0,0,0);
}
