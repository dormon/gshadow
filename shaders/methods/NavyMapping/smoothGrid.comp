#version 440 core

#ifndef BINDING_GRID
#define BINDING_GRID 0
#endif//BINDING_GRID

#ifndef BINDING_SMOOTH
#define BINDING_SMOOTH 1
#endif//BINDING_SMOOTH

#ifndef SHADOWMAP_SIZE
#define SHADOWMAP_SIZE 1024
#endif//SHADOWMAP_SIZE

#ifndef WORKGROUP_SIZE_X
#define WORKGROUP_SIZE_X 64
#endif//WORKGROUP_SIZE_X

#ifndef WALKING_WINDOW_SIZE
#define WALKING_WINDOW_SIZE 5
#endif//WALKING_WINDOW_SIZE

layout(local_size_x=WORKGROUP_SIZE_X)in;

layout(rg32ui,binding=BINDING_GRID  )uniform uimage2D         grid;
layout(r32f  ,binding=BINDING_SMOOTH)uniform  image2D smoothedGrid;


#define GRID_LINE_ID gl_GlobalInvocationID.y
#define GRID_PART    gl_GlobalInvocationID.x

vec2 getGrid(uint i){
  uvec2 data=imageLoad(grid,ivec2(i,GRID_LINE_ID)).rg;
  return vec2(2.*float(data.x)/SHADOWMAP_SIZE-1,data.y);
}

uniform int gridSize=4;

#define GETPOS(data) (data.x)
#define GETWEIGHT(data) (data.y)

void main(){
  if(GRID_PART>=SHADOWMAP_SIZE)return;
  float x=0;
  uint counter=0;
  for(int k=-WALKING_WINDOW_SIZE;k<=WALKING_WINDOW_SIZE;++k){
    if(GRID_PART+k>=0&&GRID_PART+k<SHADOWMAP_SIZE){
      vec2 data=getGrid(GRID_PART+k);
      x+=GETPOS(data)*GETWEIGHT(data);//data.x*data.y;
      counter+=uint(GETWEIGHT(data));
    }
  }
  x/=counter;
  imageStore(smoothedGrid,ivec2(GRID_PART,GRID_LINE_ID),vec4(x));
}

