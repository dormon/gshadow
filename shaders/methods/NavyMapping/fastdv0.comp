#version 440 core

#ifndef WORKGROUP_SIZE_X
#define WORKGROUP_SIZE_X 8
#endif//WORKGROUP_SIZE_X

#ifndef WORKGROUP_SIZE_Y
#define WORKGROUP_SIZE_Y 8
#endif//WORKGROUP_SIZE_Y

layout(local_size_x=WORKGROUP_SIZE_X,local_size_y=WORKGROUP_SIZE_Y)in;

layout(rg32f  ,binding=0)uniform image2D viewSample;
layout(rgba32f,binding=1)uniform image2D minmax;

uniform uvec2 windowSize=uvec2(1024u,1024u);

#define COORD  gl_GlobalInvocationID.xy
#define WCOORD gl_WorkGroupID.xy
#define LID    (gl_WorkGroupSize.x*gl_LocalInvocationID.y+gl_LocalInvocationID.x)
#define WS     (WORKGROUP_SIZE_X*WORKGROUP_SIZE_Y)

shared float local[WORKGROUP_SIZE_X*WORKGROUP_SIZE_Y];

void doMinMax(){
  for(uint g=WS;g>1;g>>=1){
    int doMax=int((LID&(g>>1))!=1);
    uint rid=LID%(g>>1);
    uint rida=(rid*2+0)*(1-2*doMax)+doMax*(WS-1);
    uint ridb=(rid*2+1)*(1-2*doMax)+doMax*(WS-1);
    uint ridc=(rid    )*(1-2*doMax)+doMax*(WS-1);
    float a=local[rida];
    float b=local[ridb];
    if(((1-2*int(doMax))*(a-b)>0||(a>1.5))&&(b<1.5))a=b;
    barrier();
    if(LID<g)local[ridc]=a;
    barrier();
  }
}

void main(){

  vec2 view=vec2(2.f);
  if(all(lessThan(COORD,windowSize)))
    view=imageLoad(viewSample,ivec2(COORD)).xy;

  vec4 final=vec4(0.);

  local[LID]=view.x;
  barrier();

  doMinMax();

  final.x=local[0];
  final.y=local[WS-1];
  barrier();

  local[LID]=view.y;
  barrier();

  doMinMax();

  final.z=local[0];
  final.w=local[WS-1];
  //barrier();

  if(LID==0)
    imageStore(minmax,ivec2(WCOORD),final);
}
