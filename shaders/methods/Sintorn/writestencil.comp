#version 430 core

//DO NOT EDIT ANYTHING BELOW THIS LINE

#ifndef MAX_LEVELS
  #define MAX_LEVELS 100
#endif//MAX_LEVELS

#ifndef LOCAL_TILE_SIZE_X
  #define LOCAL_TILE_SIZE_X 8
#endif//LOCAL_TILE_SIZE_X

#ifndef LOCAL_TILE_SIZE_Y
  #define LOCAL_TILE_SIZE_Y 8
#endif//LOCAL_TILE_SIZE_Y

#define SHADOW_VALUE   1

/*
2D work group
2D Dispatch
*/

#define WAVEFRONT_SIZE (LOCAL_TILE_SIZE_X*LOCAL_TILE_SIZE_Y)
#define UINT_BIT_SIZE 32

#define RESULT_LENGTH_IN_UINT (WAVEFRONT_SIZE/UINT_BIT_SIZE)
#define INVOCATION_ID_IN_WAVEFRONT (gl_LocalInvocationID.y*LOCAL_TILE_SIZE_X+gl_LocalInvocationID.x)

layout(local_size_x=LOCAL_TILE_SIZE_X,local_size_y=LOCAL_TILE_SIZE_Y)in;

layout(r32ui,binding=0)uniform uimage2D FinalStencilMask;
layout(std430,binding=0)buffer HSB{uint HSBData[][RESULT_LENGTH_IN_UINT];};

uniform uvec2 WindowSize;
uniform uvec2 TileDivisibility [MAX_LEVELS];
uniform uvec2 TileSizeInPixels[MAX_LEVELS];
uniform uint  NumLevels;
uniform uint  Offset;

void main(){
  //are we outside of bounds of window?
  if(any(greaterThanEqual(gl_GlobalInvocationID.xy,WindowSize)))return;
  //now we are going to compute correct 1D index of sample inside the HSB
  uvec2 ActCoord=gl_GlobalInvocationID.xy;
  uint SampleIndex1D=0;
  for(uint level=0;level<NumLevels;++level){//loop over levels
    uvec2 CW=ActCoord/TileSizeInPixels[level];
    uint TileID1D=uint(dot(CW.xy,uvec2(1,TileDivisibility[level].x)));
    SampleIndex1D+=TileID1D*TileSizeInPixels[level].x*TileSizeInPixels[level].y; 
    ActCoord&=(TileSizeInPixels[level]-1);
  }
  /*
  if(((HSBData[Offset+SampleIndex1D][INVOCATION_ID_IN_WAVEFRONT/UINT_BIT_SIZE]>>(INVOCATION_ID_IN_WAVEFRONT%UINT_BIT_SIZE))&0x1u)!=0x0u)
    imageStore(FinalStencilMask,ivec2(gl_GlobalInvocationID),ivec4(SHADOW_VALUE));
  // */
  //*
  if(HSBData[Offset+SampleIndex1D][0]!=0x0u)
    imageStore(FinalStencilMask,ivec2(gl_GlobalInvocationID),ivec4(SHADOW_VALUE));
  // */


  //if(HSBData[Offset+SampleIndex1D][0]==0x0u)
    //imageStore(FinalStencilMask,ivec2(gl_GlobalInvocationID),ivec4(SHADOW_VALUE));

}

