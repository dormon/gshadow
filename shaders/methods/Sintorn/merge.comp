#version 430 core

//DO NOT EDIT ANYTHING BELOW THIS LINE

#ifndef WAVEFRONT_SIZE
  #define WAVEFRONT_SIZE 64
#endif//WAVEFRONT_SIZE

#ifndef MAX_LEVELS
  #define MAX_LEVELS 100
#endif//MAX_LEVELS

#define UINT_BIT_SIZE 32
#define RESULT_LENGTH_IN_UINT (WAVEFRONT_SIZE/UINT_BIT_SIZE)

#define INVOCATION_ID_IN_WAVEFRONT    (uint(gl_LocalInvocationID.x))
/*
1D WorkGroup
1D Dispatch
*/

uniform uvec2 WindowSize;
uniform uvec2 SrcTileSizeInPixels;
uniform uvec2 DstTileSizeInPixels;
uniform uvec2 DstTileDivisibility;
uniform uint  SrcOffset;
uniform uint  DstOffset;

uniform uint  SrcLevel;
uniform uvec2 TileDivisibility[MAX_LEVELS];
uniform uvec2 TileSizeInPixels[MAX_LEVELS];


layout(local_size_x=WAVEFRONT_SIZE)in;

layout(std430,binding=0)buffer HSB{uint HSBData[][RESULT_LENGTH_IN_UINT];};

void main(){
  ivec2 LocalCoord=ivec2(INVOCATION_ID_IN_WAVEFRONT%DstTileDivisibility.x,INVOCATION_ID_IN_WAVEFRONT/DstTileDivisibility.x);
  if(any(greaterThanEqual(gl_WorkGroupID.xy*SrcTileSizeInPixels+LocalCoord*DstTileSizeInPixels,WindowSize)))return;
	uint SrcIndex=uint(dot(gl_WorkGroupID.xy,uvec2(1,gl_NumWorkGroups.x)));


  uvec2 ActCoord=gl_WorkGroupID.xy*TileSizeInPixels[SrcLevel];//SrcTileSizeInPixels;
  uint SampleIndex1D=0;
  for(uint level=0;level<=SrcLevel;++level){//loop over levels
    SampleIndex1D *= WAVEFRONT_SIZE;
    uvec2 CW       = ActCoord/TileSizeInPixels[level];
    uint TileID1D  = uint(dot(CW.xy,uvec2(1,TileDivisibility[level].x)));
    SampleIndex1D += TileID1D; 
    ActCoord      &= (TileSizeInPixels[level]-1);
  }
  //SrcIndex=SampleIndex1D;


  if(((HSBData[SrcOffset+SrcIndex][INVOCATION_ID_IN_WAVEFRONT/UINT_BIT_SIZE]>>(INVOCATION_ID_IN_WAVEFRONT%UINT_BIT_SIZE))&1u)!=0u
  /*
  &&gl_GlobalInvocationID.x<0 
  // */
  ){
    HSBData[DstOffset+SrcIndex*WAVEFRONT_SIZE+INVOCATION_ID_IN_WAVEFRONT][0]=0xffffffffu;
    HSBData[DstOffset+SrcIndex*WAVEFRONT_SIZE+INVOCATION_ID_IN_WAVEFRONT][1]=0xffffffffu;
  }
}
